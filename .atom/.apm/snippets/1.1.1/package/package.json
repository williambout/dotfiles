{"name":"snippets","version":"1.1.1","main":"./lib/snippets","description":"Expand snippets matching the current prefix with `tab`.","repository":{"type":"git","url":"git+https://github.com/atom/snippets.git"},"license":"MIT","engines":{"atom":"*"},"dependencies":{"async":"~0.2.6","atom-select-list":"0.0.16","fs-plus":"^2.0.0","loophole":"^1","pegjs":"~0.8.0","scoped-property-store":"^0.17.0","season":"^5.0.4","temp":"~0.8.0","underscore-plus":"^1.0.0"},"providedServices":{"snippets":{"description":"Snippets are text shortcuts that can be expanded to their definition.","versions":{"0.1.0":"provideSnippets"}}},"devDependencies":{"coffeelint":"^1.9.7"},"readme":"# Snippets package\n[![macOS Build Status](https://travis-ci.org/atom/snippets.svg?branch=master)](https://travis-ci.org/atom/snippets) [![Windows Build Status](https://ci.appveyor.com/api/projects/status/8hlc0onofkgbxw53/branch/master?svg=true)](https://ci.appveyor.com/project/Atom/snippets/branch/master) [![Dependency Status](https://david-dm.org/atom/snippets.svg)](https://david-dm.org/atom/snippets)\n\nExpand snippets matching the current prefix with <kbd>tab</kbd> in Atom.\n\nTo add your own snippets, select the _Atom > Snippets..._ menu option if you're using macOS, or the _File > Snippets..._ menu option if you're using Windows, or the _Edit > Snippets..._ menu option if you are using Linux.\n\n## Snippet Format\n\nSnippets files are stored in a package's `snippets/` folder and also loaded from `~/.atom/snippets.cson`. They can be either `.json` or `.cson` file types.\n\n```coffee\n'.source.js':\n  'console.log':\n    'prefix': 'log'\n    'body': 'console.log(${1:\"crash\"});$2'\n```\n\nThe outermost keys are the selectors where these snippets should be active, prefixed with a period (`.`) (details below).\n\nThe next level of keys are the snippet names.\n\nUnder each snippet name is a `prefix` that should trigger the snippet and a `body` to insert when the snippet is triggered.\n\n`$` followed by a number are the tabs stops which can be cycled between by pressing <kbd>tab</kbd> once a snippet has been triggered.\n\nThe above example adds a `log` snippet to JavaScript files that would expand to.\n\n```js\nconsole.log(\"crash\");\n```\n\nThe string `\"crash\"` would be initially selected and pressing tab again would place the cursor after the `;`\n\n### Optional parameters\nThese parameters are meant to provide extra information about your snippet to [autocomplete-plus](https://github.com/atom/autocomplete-plus/wiki/Provider-API).\n\n* `leftLabel` will add text to the left part of the autocomplete results box.\n* `leftLabelHTML` will overwrite what's in `leftLabel` and allow you to use a bit of CSS such as `color`.\n* `rightLabelHTML`. By default, in the right part of the results box you will see the name of the snippet. When using `rightLabelHTML` the name of the snippet will no longer be displayed, and you will be able to use a bit of CSS.\n* `description` will add text to a description box under the autocomplete results list.\n* `descriptionMoreURL` URL to the documentation of the snippet.\n\n![autocomplete-description](http://i.imgur.com/cvI2lOq.png)\n\nExample:\n```coffee\n'.source.js':\n  'console.log':\n    'prefix': 'log'\n    'body': 'console.log(${1:\"crash\"});$2'\n    'description': 'Output data to the console'\n    'rightLabelHTML': '<span style=\"color:#ff0\">JS</span>'\n```\n\n### Determining the correct scope for a snippet\n\nThe outmost key of a snippet is the \"scope\" that you want the descendent snippets to be available in. The key should be prefixed with a period (`text.html.basic` => `.text.html.basic`). You can find out the correct scope by opening the Settings (<kbd>cmd-,</kbd> on macOS) and selecting the corresponding *Language [xxx]* package, e.g. for *Language Html*:\n\n![Screenshot of Language Html settings](https://cloud.githubusercontent.com/assets/1038121/5137632/126beb66-70f2-11e4-839b-bc7e84103f67.png)\n\nIf it's difficult to determine the package handling the file type in question (for example, for `.md`-documents), you can also proceed as following. Put your cursor in a file in which you want the snippet to be available, open the [Command Palette](https://github.com/atom/command-palette)\n(<kbd>cmd-shift-p</kbd>), and run the `Editor: Log Cursor Scope` command. This will trigger a notification which will contain a list of scopes. The first scope that's listed is the scope for that language. Here are some examples: `source.coffee`, `text.plain`, `text.html.basic`.\n\n### Multi-line Snippet Body\n\nYou can also use multi-line syntax using `\"\"\"` for larger templates:\n\n```coffee\n'.source.js':\n  'if, else if, else':\n    'prefix': 'ieie'\n    'body': \"\"\"\n      if (${1:true}) {\n        $2\n      } else if (${3:false}) {\n        $4\n      } else {\n        $5\n      }\n    \"\"\"\n```\n\n### Escaping Characters\n\nIncluding a literal closing brace inside the text provided by a snippet's tab stop will close that tab stop early. To prevent that, escape the brace with two backslashes, like so:\n\n```coffee\n'.source.js':\n  'function':\n    'prefix': 'funct'\n    'body': \"\"\"\n      ${1:function () {\n        statements;\n      \\\\}\n      this line is also included in the snippet tab;\n      }\n      \"\"\"\n```\n\n### Multiple snippets for the same scope\n\nSnippets for the same scope must be placed within the same key. See [this section of the Atom Flight Manual](http://flight-manual.atom.io/using-atom/sections/basic-customization/#configuring-with-cson) for more information.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/atom/snippets/issues"},"homepage":"https://github.com/atom/snippets#readme","_id":"snippets@1.1.1","_shasum":"a800ca534bd6f98e05ac522fbdb6231da8982d2c","_resolved":"file:../../../../../private/var/folders/sw/wbgckh6d6g5gb9dpvj0jsjjh0000gp/T/d-11729-89205-6itszj.hdfvtpgb9/package.tgz","_from":"../../../../../private/var/folders/sw/wbgckh6d6g5gb9dpvj0jsjjh0000gp/T/d-11729-89205-6itszj.hdfvtpgb9/package.tgz"}